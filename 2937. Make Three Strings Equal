QUESTION:-
You are given three strings: s1, s2, and s3. In one operation you can choose one of these strings and delete its rightmost character. Note that you cannot completely empty a string.
Return the minimum number of operations required to make the strings equal. If it is impossible to make them equal, return -1.

Example 1:
Input: s1 = "abc", s2 = "abb", s3 = "ab"
Output: 2
Explanation: Deleting the rightmost character from both s1 and s2 will result in three equal strings.

Example 2:
Input: s1 = "dac", s2 = "bac", s3 = "cac"
Output: -1
Explanation: Since the first letters of s1 and s2 differ, they cannot be made equal.

CODE:-
int findMinimumOperations(char* s1, char* s2, char* s3) {
    int a = strlen(s1);
    int b = strlen(s2);
    int c = strlen(s3);
    int len = a + b + c;
    int i;
    int min = a < b ? a :b ;
    min=min<c?min:c;
    for (i = 0; i < min; i++) {
        if (s1[i] != s2[i] || s1[i] != s3[i] || s2[i] != s3[i]) {
            if (i == 0){
                return -1;
            }
            return len -3*i;
        }
    }
    return len - 3 * i;
}
