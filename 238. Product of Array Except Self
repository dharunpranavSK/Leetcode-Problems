QUESTION:-
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

CODE:-
int* productExceptSelf(int* nums, int numsSize, int* returnSize) {
    int* right = (int*)malloc(numsSize * sizeof(int));
    int* res = (int*)malloc(numsSize * sizeof(int));
    
    int prod = 1;
    for(int i = numsSize - 1; i >= 0; i--) {
        prod *= nums[i];
        right[i] = prod;
    }

    prod = 1;
    for(int i = 0; i < numsSize - 1; i++) {
        int lp = prod;
        int rp = right[i + 1];

        res[i] = rp * lp;
        prod *= nums[i]; 
    }
    res[numsSize - 1] = prod;
    *returnSize = numsSize;
    free(right);
    return res;
}
