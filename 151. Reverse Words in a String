QUESTION:-
Given an input string s, reverse the order of the words.
A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
Return a string of the words in reverse order concatenated by a single space.
Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

CODE:-
char* reverseWords(char* s) {
    int length = strlen(s);
    int i, j;
    for (i = 0; i < length; i++) {
        if (s[i] == ' ') {
            for (j = i; j < length - 1; j++) {
                s[j] = s[j + 1];
            }
            s[j] = '\0';
            i--;
            length--;
        } else {
            break;
        }
    }

    length = strlen(s);
    for (i = length - 1; i >= 0; i--) {
        if (s[i] == ' ') {
            s[i] = '\0';
        } else {
            break;
        }
    }

    int r = 0, c = 0;
    char str[1000][1000] = {0};
    for (i = 0; i < strlen(s); i++) {
        if (s[i] != ' ' && s[i] != '\0') {
            str[r][c++] = s[i];
        } else if(s[i]==' '&&s[i-1]==' '){
            continue;
        }else {
            r++;
            c = 0;
        }
    }
    s[0] = '\0';
    for (i = r; i >= 0; i--) {
        strcat(s, str[i]);
        if (i > 0) {
            strcat(s, " ");
        }
    }
    return s;
}
